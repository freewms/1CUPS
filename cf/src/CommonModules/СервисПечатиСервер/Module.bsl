// @strict-types


#Область ПрограммныйИнтерфейс

Функция НапечататьДокумент(Документ, Принтер) Экспорт
	
	Возврат Истина;

КонецФункции

Функция НапечататьТестовуюСтраницу(Принтер) Экспорт
		
	ИнициализироватьОкружениеКоманды();
	 
  	ВыбранныеПринтеры = Принтеры.НайтиСтроки(Новый Структура("Выбран",Истина));
	Если НЕ ВыбранныеПринтеры.Количество() > 0 Тогда
		Информация = "Необходимо выбрать принтеры для печати";
		Возврат;
	КонецЕсли;


	 // Подготовим данные в формате JSON для запроса команды
	 МассивПринтеров = Новый Массив;
	 
	 Для Каждого Принтер Из ВыбранныеПринтеры Цикл
		 	МассивПринтеров.Добавить(Принтер.Имя);
     КонецЦикла;
	 
	 ДанныеЗапроса = Новый Соответствие();
	 ДанныеЗапроса.Вставить("command","print_test_page");
	 ДанныеЗапроса.Вставить("printers", МассивПринтеров);
	 ДанныеЗапросаСтрокой = JSONEncode(ДанныеЗапроса);
	 
	 // Запрос в 1CUPS
	 HTTPСоединение = Новый HTTPСоединение(Адрес1CUPS, Порт1CUPS,,,,5);
	 HTTPЗапрос = Новый HTTPЗапрос;
	 HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	 HTTPЗапрос.УстановитьТелоИзСтроки(ДанныеЗапросаСтрокой);
	 Результат = HTTPСоединение.ВызватьHTTPМетод("POST",HTTPЗапрос);
	 ДанныеОтветаСтрокой = Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	 КодОтвета = Результат.КодСостояния;
	 
	 // Ответ 1CUPS будет дан по каждому принтеру
	 Информация = ДанныеОтветаСтрокой;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Код процедур и функций

#КонецОбласти
